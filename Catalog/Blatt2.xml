<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<exercises>
    <currentIndex>0</currentIndex>
    <exercise name="Signumfunktion">
        <description>Die Vorzeichenfunktion oder Signumfunktion ist in der Mathematik eine Funktion, die einer reellen oder komplexen Zahl ihr Vorzeichen zuordnet.</description>
        <classes>
            <class name="Signum">
                <code>
                    /******************************************************************************
                    * Compilation: javac Signum.java
                    * Execution: java Signum n
                    *
                    * Eingabe und Ausgabe: Ueber main Funktion bereits vorgegeben.
                    *
                    ******************************************************************************/

                    public class Signum {
                    public static void main(String[] args) {
                    int n = Integer.parseInt(args[0]);
                    System.out.println(signum(n));
                    }

                    public static int signum(int n){
if(n&gt;=0) return 1;
return -1;
                    }
                    }
                </code>
                <test name="SignumTest">
                    import static org.junit.Assert.*;
                    import org.junit.Test;

                    public class SignumTest {

                    @Test
                    public void testPositiveInput() {
                    assertEquals(1, Signum.signum(10));
                    }
		@Test
                    public void testPositiveInput2() {
                    assertEquals(-1, Signum.signum(1));
                    }
                    }
                </test>
            </class>
        </classes>
        <config>
            <babysteps value="False" time="0"/>
            <timetracking value="True"/>
        </config>
    </exercise>
    <exercise name="Euler'sche phi-Funktion">
        <description>Die Euler'sche phi-Funktion ist von großer Bedeutung in der Zahlentheorie: phi(n) ist definiert
            als die Anzahl der positiven Integer kleiner oder gleich n, die teilerfremd zu n sind
            (d.h. die außer der 1 keine Teiler mit n gemeinsam haben).</description>
        <classes>
            <class name="PhiFunk">
                <code>
                    /******************************************************************************
                    * Compilation: javac PhiFunk.java
                    * Execution: java PhiFunk n
                    *
                    * Eingabe: Integer n &gt; 0
                    * Ausgabe: phi(n), die Formatierung der Ausgabe ist Ihnen ueberlassen.
                    * Rueckgabe der Funktion phi(): Integer, der besagt, wie viele zu n teilerfremde
                    * positive natürliche Zahlen kleiner n es gibt.
                    *
                    * Sie duerfen davon ausgehen, dass das Programm korrekt aufgerufen wird.
                    ******************************************************************************/

                    public class PhiFunk {
                    // Implementieren Sie Ihre Loesung hier
                    }
                </code>
                <test name="PhiFunkTest">
                    import static org.junit.Assert.*;
                    import org.junit.Test;

                    public class PhiFunkTest {

                    @Test
                    public void testPrimes2() {
                    int p = 2;
                    assertEquals(p-1, PhiFunk.phi(p));
                    }

                    @Test
                    public void testPrimes3() {
                    int p = 3;
                    assertEquals(p-1, PhiFunk.phi(p));
                    }

                    @Test
                    public void testPrimes5() {
                    int p = 5;
                    assertEquals(p-1, PhiFunk.phi(p));
                    }

                    @Test
                    public void testPrimes7() {
                    int p = 7;
                    assertEquals(p-1, PhiFunk.phi(p));
                    }

                    @Test
                    public void testPrimes11() {
                    int p = 11;
                    assertEquals(p-1, PhiFunk.phi(p));
                    }

                    @Test
                    public void testComposite6() {
                    assertEquals(2, PhiFunk.phi(6));
                    }

                    @Test
                    public void testComposite22() {
                    assertEquals(10, PhiFunk.phi(22));
                    }

                    @Test
                    public void testComposite87() {
                    assertEquals(56, PhiFunk.phi(87));
                    }

                    @Test
                    public void testComposite58() {
                    assertEquals(28, PhiFunk.phi(58));
                    }

                    @Test
                    public void testComposite91() {
                    assertEquals(72, PhiFunk.phi(91));
                    }

                    @Test
                    public void testComposite914345() {
                    assertEquals(664320, PhiFunk.phi(914345));
                    }
                    }
                </test>
            </class>
        </classes>
        <config>
            <babysteps value="False" time="0"/>
            <timetracking value="True"/>
        </config>
    </exercise>
    <exercise name="Logische Verknüpfung">
        <description>Schreiben Sie eine Methode all(), die ein Array von booleschen Werten als Argument
            übernimmt und true zurückliefert, wenn alle Elemente im Array true sind.</description>
        <classes>
            <class name="Logik">
                <code>
                    /******************************************************************************
                    *  Compilation:  javac Logik.java
                    *  Execution:    java Logik
                    *
                    *  Eingabe fuer die Funktion all(): Array a von Wahrheitswerten
                    *  Rueckgabe der Funktion all(): true, wenn alle Werte in a true sind,
                    *                                false, sonst
                    ******************************************************************************/

                    public class Logik {
                    public static void main(String[] args) {
                    // Sie duerfen hier fuer Ihre eigenen Zwecke eine Ausgabe programmieren.
                    // Dies ist aber kein Bestandteil der Aufgabe.
                    }

                    // Implementieren Sie Ihre Loesung hier
                    }
                </code>
                <test name="LogikTest">
                    import static org.junit.Assert.*;
                    import org.junit.Test;

                    public class LogikTest {

                    @Test
                    public void testEmptyInput()  {
                    boolean[] input = {};
                    assertEquals(true, Logik.all(input));
                    }

                    @Test
                    public void testTrueSingleton()  {
                    boolean[] input = {true};
                    assertEquals(true, Logik.all(input));
                    }

                    @Test
                    public void testFalseSingleton()  {
                    boolean[] input = {false};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeAllTrue()  {
                    boolean[] input = {true, true, true};
                    assertEquals(true, Logik.all(input));
                    }

                    @Test
                    public void testThreeAllFalse()  {
                    boolean[] input = {false, false, false};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeTwoFalse12()  {
                    boolean[] input = {false, false, true};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeTwoFalse13()  {
                    boolean[] input = {false, true, false};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeTwoFalse23()  {
                    boolean[] input = {true, false, false};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeOneFalse1()  {
                    boolean[] input = {false, true, true};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeOneFalse2()  {
                    boolean[] input = {true, false, true};
                    assertEquals(false, Logik.all(input));
                    }

                    @Test
                    public void testThreeOneFalse3()  {
                    boolean[] input = {true, true, false};
                    assertEquals(false, Logik.all(input));
                    }
                    }
                </test>
            </class>
        </classes>
        <config>
            <babysteps value="True" time="120"/>
            <timetracking value="True"/>
        </config>
    </exercise>
    <file>D:\Dokumente\Projekte\h4up1s4ach3-z4h13n-1m-n4m3n\Catalog\Blatt2.xml</file>
</exercises>
